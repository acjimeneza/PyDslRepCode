/*
 * generated by Xtext 2.18.0.M3
 */
package edu.ulibertadores.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PyDslRepGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Model");
		private final Assignment cEnvironmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvironmentEntityParserRuleCall_0 = (RuleCall)cEnvironmentAssignment.eContents().get(0);
		
		//Model:
		//	environment+=Entity*;
		@Override public ParserRule getRule() { return rule; }
		
		//environment+=Entity*
		public Assignment getEnvironmentAssignment() { return cEnvironmentAssignment; }
		
		//Entity
		public RuleCall getEnvironmentEntityParserRuleCall_0() { return cEnvironmentEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRobotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIPParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeSensorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWheelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDataMoveParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMoveCollectionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Entity:
		//	Environment | Robot | IP | Sensor | TypeSensor | Wheel | DataMove | MoveCollection;
		@Override public ParserRule getRule() { return rule; }
		
		//Environment | Robot | IP | Sensor | TypeSensor | Wheel | DataMove | MoveCollection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Environment
		public RuleCall getEnvironmentParserRuleCall_0() { return cEnvironmentParserRuleCall_0; }
		
		//Robot
		public RuleCall getRobotParserRuleCall_1() { return cRobotParserRuleCall_1; }
		
		//IP
		public RuleCall getIPParserRuleCall_2() { return cIPParserRuleCall_2; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_3() { return cSensorParserRuleCall_3; }
		
		//TypeSensor
		public RuleCall getTypeSensorParserRuleCall_4() { return cTypeSensorParserRuleCall_4; }
		
		//Wheel
		public RuleCall getWheelParserRuleCall_5() { return cWheelParserRuleCall_5; }
		
		//DataMove
		public RuleCall getDataMoveParserRuleCall_6() { return cDataMoveParserRuleCall_6; }
		
		//MoveCollection
		public RuleCall getMoveCollectionParserRuleCall_7() { return cMoveCollectionParserRuleCall_7; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cIpKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cIpIPCrossReference_2_2_0 = (CrossReference)cIpAssignment_2_2.eContents().get(0);
		private final RuleCall cIpIPIDTerminalRuleCall_2_2_0_1 = (RuleCall)cIpIPCrossReference_2_2_0.eContents().get(1);
		private final Keyword cHasKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRobotsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRobotsRobotCrossReference_5_0 = (CrossReference)cRobotsAssignment_5.eContents().get(0);
		private final RuleCall cRobotsRobotIDTerminalRuleCall_5_0_1 = (RuleCall)cRobotsRobotCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRobotsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cMovesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cMovesMoveCollectionCrossReference_8_2_0 = (CrossReference)cMovesAssignment_8_2.eContents().get(0);
		private final RuleCall cMovesMoveCollectionIDTerminalRuleCall_8_2_0_1 = (RuleCall)cMovesMoveCollectionCrossReference_8_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cMovesKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//Environment:
		//	'environment' name=ID ('with' 'ip' ip=[IP])? 'has' '{'
		//	robots+=[Robot]*
		//	'}' 'robots' ('with' '{'
		//	moves+=[MoveCollection]*
		//	'}' 'moves')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' name=ID ('with' 'ip' ip=[IP])? 'has' '{' robots+=[Robot]* '}' 'robots' ('with' '{'
		//moves+=[MoveCollection]* '}' 'moves')?
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with' 'ip' ip=[IP])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//'ip'
		public Keyword getIpKeyword_2_1() { return cIpKeyword_2_1; }
		
		//ip=[IP]
		public Assignment getIpAssignment_2_2() { return cIpAssignment_2_2; }
		
		//[IP]
		public CrossReference getIpIPCrossReference_2_2_0() { return cIpIPCrossReference_2_2_0; }
		
		//ID
		public RuleCall getIpIPIDTerminalRuleCall_2_2_0_1() { return cIpIPIDTerminalRuleCall_2_2_0_1; }
		
		//'has'
		public Keyword getHasKeyword_3() { return cHasKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//robots+=[Robot]*
		public Assignment getRobotsAssignment_5() { return cRobotsAssignment_5; }
		
		//[Robot]
		public CrossReference getRobotsRobotCrossReference_5_0() { return cRobotsRobotCrossReference_5_0; }
		
		//ID
		public RuleCall getRobotsRobotIDTerminalRuleCall_5_0_1() { return cRobotsRobotIDTerminalRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'robots'
		public Keyword getRobotsKeyword_7() { return cRobotsKeyword_7; }
		
		//('with' '{' moves+=[MoveCollection]* '}' 'moves')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'with'
		public Keyword getWithKeyword_8_0() { return cWithKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//moves+=[MoveCollection]*
		public Assignment getMovesAssignment_8_2() { return cMovesAssignment_8_2; }
		
		//[MoveCollection]
		public CrossReference getMovesMoveCollectionCrossReference_8_2_0() { return cMovesMoveCollectionCrossReference_8_2_0; }
		
		//ID
		public RuleCall getMovesMoveCollectionIDTerminalRuleCall_8_2_0_1() { return cMovesMoveCollectionIDTerminalRuleCall_8_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'moves'
		public Keyword getMovesKeyword_8_4() { return cMovesKeyword_8_4; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPortKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortINTTerminalRuleCall_4_0 = (RuleCall)cPortAssignment_4.eContents().get(0);
		private final Keyword cHasKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWheelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cWheelsWheelCrossReference_7_0 = (CrossReference)cWheelsAssignment_7.eContents().get(0);
		private final RuleCall cWheelsWheelIDTerminalRuleCall_7_0_1 = (RuleCall)cWheelsWheelCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWheelsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Robot:
		//	'robot' name=ID 'with' 'port' port=INT 'has' '{'
		//	wheels+=[Wheel]+
		//	'}' 'wheels';
		@Override public ParserRule getRule() { return rule; }
		
		//'robot' name=ID 'with' 'port' port=INT 'has' '{' wheels+=[Wheel]+ '}' 'wheels'
		public Group getGroup() { return cGroup; }
		
		//'robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'port'
		public Keyword getPortKeyword_3() { return cPortKeyword_3; }
		
		//port=INT
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_4_0() { return cPortINTTerminalRuleCall_4_0; }
		
		//'has'
		public Keyword getHasKeyword_5() { return cHasKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//wheels+=[Wheel]+
		public Assignment getWheelsAssignment_7() { return cWheelsAssignment_7; }
		
		//[Wheel]
		public CrossReference getWheelsWheelCrossReference_7_0() { return cWheelsWheelCrossReference_7_0; }
		
		//ID
		public RuleCall getWheelsWheelIDTerminalRuleCall_7_0_1() { return cWheelsWheelIDTerminalRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'wheels'
		public Keyword getWheelsKeyword_9() { return cWheelsKeyword_9; }
	}
	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIpIPAParserRuleCall_2_0 = (RuleCall)cIpAssignment_2.eContents().get(0);
		
		//IP:
		//	'ip' name=ID ip=IPA;
		@Override public ParserRule getRule() { return rule; }
		
		//'ip' name=ID ip=IPA
		public Group getGroup() { return cGroup; }
		
		//'ip'
		public Keyword getIpKeyword_0() { return cIpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//ip=IPA
		public Assignment getIpAssignment_2() { return cIpAssignment_2; }
		
		//IPA
		public RuleCall getIpIPAParserRuleCall_2_0() { return cIpIPAParserRuleCall_2_0; }
	}
	public class IPAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.IPA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//IPA:
		//	INT '.' INT '.' INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT '.' INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class WheelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Wheel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWheelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRadiusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRadiusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRadiusFLOATParserRuleCall_4_0 = (RuleCall)cRadiusAssignment_4.eContents().get(0);
		
		//Wheel:
		//	'wheel' name=ID 'with' 'radius' radius=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'wheel' name=ID 'with' 'radius' radius=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'wheel'
		public Keyword getWheelKeyword_0() { return cWheelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'radius'
		public Keyword getRadiusKeyword_3() { return cRadiusKeyword_3; }
		
		//radius=FLOAT
		public Assignment getRadiusAssignment_4() { return cRadiusAssignment_4; }
		
		//FLOAT
		public RuleCall getRadiusFLOATParserRuleCall_4_0() { return cRadiusFLOATParserRuleCall_4_0; }
	}
	public class MoveCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.MoveCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcurrentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcurrentParallelParserRuleCall_0_0 = (RuleCall)cConcurrentAssignment_0.eContents().get(0);
		private final Keyword cMovementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRobotAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRobotRobotCrossReference_4_0 = (CrossReference)cRobotAssignment_4.eContents().get(0);
		private final RuleCall cRobotRobotIDTerminalRuleCall_4_0_1 = (RuleCall)cRobotRobotCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMovesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMovesAbstractDataMoveParserRuleCall_6_0 = (RuleCall)cMovesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MoveCollection:
		//	concurrent?=Parallel? 'movement' name=ID 'of' robot=[Robot] '{'
		//	moves+=AbstractDataMove*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//concurrent?=Parallel? 'movement' name=ID 'of' robot=[Robot] '{' moves+=AbstractDataMove* "}"
		public Group getGroup() { return cGroup; }
		
		//concurrent?=Parallel?
		public Assignment getConcurrentAssignment_0() { return cConcurrentAssignment_0; }
		
		//Parallel
		public RuleCall getConcurrentParallelParserRuleCall_0_0() { return cConcurrentParallelParserRuleCall_0_0; }
		
		//'movement'
		public Keyword getMovementKeyword_1() { return cMovementKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//robot=[Robot]
		public Assignment getRobotAssignment_4() { return cRobotAssignment_4; }
		
		//[Robot]
		public CrossReference getRobotRobotCrossReference_4_0() { return cRobotRobotCrossReference_4_0; }
		
		//ID
		public RuleCall getRobotRobotIDTerminalRuleCall_4_0_1() { return cRobotRobotIDTerminalRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//moves+=AbstractDataMove*
		public Assignment getMovesAssignment_6() { return cMovesAssignment_6; }
		
		//AbstractDataMove
		public RuleCall getMovesAbstractDataMoveParserRuleCall_6_0() { return cMovesAbstractDataMoveParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AbstractDataMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.AbstractDataMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractCrossMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDataMove:
		//	AbstractCrossMove | AbstractMove;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractCrossMove | AbstractMove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractCrossMove
		public RuleCall getAbstractCrossMoveParserRuleCall_0() { return cAbstractCrossMoveParserRuleCall_0; }
		
		//AbstractMove
		public RuleCall getAbstractMoveParserRuleCall_1() { return cAbstractMoveParserRuleCall_1; }
	}
	public class AbstractMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.AbstractMove");
		private final Assignment cTypeMAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeMDataMoveParserRuleCall_0 = (RuleCall)cTypeMAssignment.eContents().get(0);
		
		//AbstractMove:
		//	typeM=DataMove;
		@Override public ParserRule getRule() { return rule; }
		
		//typeM=DataMove
		public Assignment getTypeMAssignment() { return cTypeMAssignment; }
		
		//DataMove
		public RuleCall getTypeMDataMoveParserRuleCall_0() { return cTypeMDataMoveParserRuleCall_0; }
	}
	public class AbstractCrossMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.AbstractCrossMove");
		private final Assignment cTypeMAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeMDataMoveCrossReference_0 = (CrossReference)cTypeMAssignment.eContents().get(0);
		private final RuleCall cTypeMDataMoveIDTerminalRuleCall_0_1 = (RuleCall)cTypeMDataMoveCrossReference_0.eContents().get(1);
		
		//AbstractCrossMove:
		//	typeM=[DataMove];
		@Override public ParserRule getRule() { return rule; }
		
		//typeM=[DataMove]
		public Assignment getTypeMAssignment() { return cTypeMAssignment; }
		
		//[DataMove]
		public CrossReference getTypeMDataMoveCrossReference_0() { return cTypeMDataMoveCrossReference_0; }
		
		//ID
		public RuleCall getTypeMDataMoveIDTerminalRuleCall_0_1() { return cTypeMDataMoveIDTerminalRuleCall_0_1; }
	}
	public class DataMoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.DataMove");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTurnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataMove:
		//	Turn | Move;
		@Override public ParserRule getRule() { return rule; }
		
		//Turn | Move
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_0() { return cTurnParserRuleCall_0; }
		
		//Move
		public RuleCall getMoveParserRuleCall_1() { return cMoveParserRuleCall_1; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceFLOATParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDistanceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVelocityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVelocityFLOATParserRuleCall_4_1_0 = (RuleCall)cVelocityAssignment_4_1.eContents().get(0);
		
		//Move:
		//	'move' name?=ID? distance=FLOAT type=Distance ('at' velocity=FLOAT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' name?=ID? distance=FLOAT type=Distance ('at' velocity=FLOAT)?
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//name?=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//distance=FLOAT
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//FLOAT
		public RuleCall getDistanceFLOATParserRuleCall_2_0() { return cDistanceFLOATParserRuleCall_2_0; }
		
		//type=Distance
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Distance
		public RuleCall getTypeDistanceParserRuleCall_3_0() { return cTypeDistanceParserRuleCall_3_0; }
		
		//('at' velocity=FLOAT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'at'
		public Keyword getAtKeyword_4_0() { return cAtKeyword_4_0; }
		
		//velocity=FLOAT
		public Assignment getVelocityAssignment_4_1() { return cVelocityAssignment_4_1; }
		
		//FLOAT
		public RuleCall getVelocityFLOATParserRuleCall_4_1_0() { return cVelocityFLOATParserRuleCall_4_1_0; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Parallel");
		private final Keyword cParallelKeyword = (Keyword)rule.eContents().get(1);
		
		//Parallel:
		//	'parallel';
		@Override public ParserRule getRule() { return rule; }
		
		//'parallel'
		public Keyword getParallelKeyword() { return cParallelKeyword; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Distance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMetersKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCentimetersKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Distance:
		//	'meters' | 'centimeters';
		@Override public ParserRule getRule() { return rule; }
		
		//'meters' | 'centimeters'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'meters'
		public Keyword getMetersKeyword_0() { return cMetersKeyword_0; }
		
		//'centimeters'
		public Keyword getCentimetersKeyword_1() { return cCentimetersKeyword_1; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOrientationParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cVelocityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVelocityFLOATParserRuleCall_3_0 = (RuleCall)cVelocityAssignment_3.eContents().get(0);
		
		//Turn:
		//	'turn' name?=ID? type=Orientation velocity=FLOAT?;
		@Override public ParserRule getRule() { return rule; }
		
		//'turn' name?=ID? type=Orientation velocity=FLOAT?
		public Group getGroup() { return cGroup; }
		
		//'turn'
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//name?=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=Orientation
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Orientation
		public RuleCall getTypeOrientationParserRuleCall_2_0() { return cTypeOrientationParserRuleCall_2_0; }
		
		//velocity=FLOAT?
		public Assignment getVelocityAssignment_3() { return cVelocityAssignment_3; }
		
		//FLOAT
		public RuleCall getVelocityFLOATParserRuleCall_3_0() { return cVelocityFLOATParserRuleCall_3_0; }
	}
	public class OrientationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Orientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Orientation:
		//	'left' | 'right';
		@Override public ParserRule getRule() { return rule; }
		
		//'left' | 'right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FLOAT:
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeSensorParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Sensor:
		//	'sensor' name=ID ':' type=TypeSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID ':' type=TypeSensor
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeSensor
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeSensor
		public RuleCall getTypeTypeSensorParserRuleCall_3_0() { return cTypeTypeSensorParserRuleCall_3_0; }
	}
	public class TypeSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ulibertadores.PyDslRep.TypeSensor");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameBumperKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameDistanceKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		
		//TypeSensor:
		//	typeName=('bumper' | 'distance');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('bumper' | 'distance')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('bumper' | 'distance')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'bumper'
		public Keyword getTypeNameBumperKeyword_0_0() { return cTypeNameBumperKeyword_0_0; }
		
		//'distance'
		public Keyword getTypeNameDistanceKeyword_0_1() { return cTypeNameDistanceKeyword_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final EnvironmentElements pEnvironment;
	private final RobotElements pRobot;
	private final IPElements pIP;
	private final IPAElements pIPA;
	private final WheelElements pWheel;
	private final MoveCollectionElements pMoveCollection;
	private final AbstractDataMoveElements pAbstractDataMove;
	private final AbstractMoveElements pAbstractMove;
	private final AbstractCrossMoveElements pAbstractCrossMove;
	private final DataMoveElements pDataMove;
	private final MoveElements pMove;
	private final ParallelElements pParallel;
	private final DistanceElements pDistance;
	private final TurnElements pTurn;
	private final OrientationElements pOrientation;
	private final FLOATElements pFLOAT;
	private final SensorElements pSensor;
	private final TypeSensorElements pTypeSensor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PyDslRepGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pEnvironment = new EnvironmentElements();
		this.pRobot = new RobotElements();
		this.pIP = new IPElements();
		this.pIPA = new IPAElements();
		this.pWheel = new WheelElements();
		this.pMoveCollection = new MoveCollectionElements();
		this.pAbstractDataMove = new AbstractDataMoveElements();
		this.pAbstractMove = new AbstractMoveElements();
		this.pAbstractCrossMove = new AbstractCrossMoveElements();
		this.pDataMove = new DataMoveElements();
		this.pMove = new MoveElements();
		this.pParallel = new ParallelElements();
		this.pDistance = new DistanceElements();
		this.pTurn = new TurnElements();
		this.pOrientation = new OrientationElements();
		this.pFLOAT = new FLOATElements();
		this.pSensor = new SensorElements();
		this.pTypeSensor = new TypeSensorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ulibertadores.PyDslRep".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	environment+=Entity*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//	Environment | Robot | IP | Sensor | TypeSensor | Wheel | DataMove | MoveCollection;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Environment:
	//	'environment' name=ID ('with' 'ip' ip=[IP])? 'has' '{'
	//	robots+=[Robot]*
	//	'}' 'robots' ('with' '{'
	//	moves+=[MoveCollection]*
	//	'}' 'moves')?;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//Robot:
	//	'robot' name=ID 'with' 'port' port=INT 'has' '{'
	//	wheels+=[Wheel]+
	//	'}' 'wheels';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//IP:
	//	'ip' name=ID ip=IPA;
	public IPElements getIPAccess() {
		return pIP;
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}
	
	//IPA:
	//	INT '.' INT '.' INT '.' INT;
	public IPAElements getIPAAccess() {
		return pIPA;
	}
	
	public ParserRule getIPARule() {
		return getIPAAccess().getRule();
	}
	
	//Wheel:
	//	'wheel' name=ID 'with' 'radius' radius=FLOAT;
	public WheelElements getWheelAccess() {
		return pWheel;
	}
	
	public ParserRule getWheelRule() {
		return getWheelAccess().getRule();
	}
	
	//MoveCollection:
	//	concurrent?=Parallel? 'movement' name=ID 'of' robot=[Robot] '{'
	//	moves+=AbstractDataMove*
	//	"}";
	public MoveCollectionElements getMoveCollectionAccess() {
		return pMoveCollection;
	}
	
	public ParserRule getMoveCollectionRule() {
		return getMoveCollectionAccess().getRule();
	}
	
	//AbstractDataMove:
	//	AbstractCrossMove | AbstractMove;
	public AbstractDataMoveElements getAbstractDataMoveAccess() {
		return pAbstractDataMove;
	}
	
	public ParserRule getAbstractDataMoveRule() {
		return getAbstractDataMoveAccess().getRule();
	}
	
	//AbstractMove:
	//	typeM=DataMove;
	public AbstractMoveElements getAbstractMoveAccess() {
		return pAbstractMove;
	}
	
	public ParserRule getAbstractMoveRule() {
		return getAbstractMoveAccess().getRule();
	}
	
	//AbstractCrossMove:
	//	typeM=[DataMove];
	public AbstractCrossMoveElements getAbstractCrossMoveAccess() {
		return pAbstractCrossMove;
	}
	
	public ParserRule getAbstractCrossMoveRule() {
		return getAbstractCrossMoveAccess().getRule();
	}
	
	//DataMove:
	//	Turn | Move;
	public DataMoveElements getDataMoveAccess() {
		return pDataMove;
	}
	
	public ParserRule getDataMoveRule() {
		return getDataMoveAccess().getRule();
	}
	
	//Move:
	//	'move' name?=ID? distance=FLOAT type=Distance ('at' velocity=FLOAT)?;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//Parallel:
	//	'parallel';
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//Distance:
	//	'meters' | 'centimeters';
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Turn:
	//	'turn' name?=ID? type=Orientation velocity=FLOAT?;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Orientation:
	//	'left' | 'right';
	public OrientationElements getOrientationAccess() {
		return pOrientation;
	}
	
	public ParserRule getOrientationRule() {
		return getOrientationAccess().getRule();
	}
	
	//FLOAT:
	//	'-'? INT '.' INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//Sensor:
	//	'sensor' name=ID ':' type=TypeSensor;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//TypeSensor:
	//	typeName=('bumper' | 'distance');
	public TypeSensorElements getTypeSensorAccess() {
		return pTypeSensor;
	}
	
	public ParserRule getTypeSensorRule() {
		return getTypeSensorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
