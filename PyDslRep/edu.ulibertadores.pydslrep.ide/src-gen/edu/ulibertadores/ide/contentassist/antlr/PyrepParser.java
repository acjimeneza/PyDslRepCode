/*
 * generated by Xtext 2.18.0.M3
 */
package edu.ulibertadores.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.ulibertadores.ide.contentassist.antlr.internal.InternalPyDslRepParser;
import edu.ulibertadores.services.PyDslRepGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PyDslRepParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PyDslRepGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PyDslRepGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getAbstractDataMoveAccess().getAlternatives(), "rule__AbstractDataMove__Alternatives");
			builder.put(grammarAccess.getDataMoveAccess().getAlternatives(), "rule__DataMove__Alternatives");
			builder.put(grammarAccess.getDistanceAccess().getAlternatives(), "rule__Distance__Alternatives");
			builder.put(grammarAccess.getOrientationAccess().getAlternatives(), "rule__Orientation__Alternatives");
			builder.put(grammarAccess.getTypeSensorAccess().getTypeNameAlternatives_0(), "rule__TypeSensor__TypeNameAlternatives_0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_2(), "rule__Environment__Group_2__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_8(), "rule__Environment__Group_8__0");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getIPAccess().getGroup(), "rule__IP__Group__0");
			builder.put(grammarAccess.getIPAAccess().getGroup(), "rule__IPA__Group__0");
			builder.put(grammarAccess.getWheelAccess().getGroup(), "rule__Wheel__Group__0");
			builder.put(grammarAccess.getMoveCollectionAccess().getGroup(), "rule__MoveCollection__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_4(), "rule__Move__Group_4__0");
			builder.put(grammarAccess.getTurnAccess().getGroup(), "rule__Turn__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getModelAccess().getEnvironmentAssignment(), "rule__Model__EnvironmentAssignment");
			builder.put(grammarAccess.getEnvironmentAccess().getNameAssignment_1(), "rule__Environment__NameAssignment_1");
			builder.put(grammarAccess.getEnvironmentAccess().getIpAssignment_2_2(), "rule__Environment__IpAssignment_2_2");
			builder.put(grammarAccess.getEnvironmentAccess().getRobotsAssignment_5(), "rule__Environment__RobotsAssignment_5");
			builder.put(grammarAccess.getEnvironmentAccess().getMovesAssignment_8_2(), "rule__Environment__MovesAssignment_8_2");
			builder.put(grammarAccess.getRobotAccess().getNameAssignment_1(), "rule__Robot__NameAssignment_1");
			builder.put(grammarAccess.getRobotAccess().getPortAssignment_4(), "rule__Robot__PortAssignment_4");
			builder.put(grammarAccess.getRobotAccess().getWheelsAssignment_7(), "rule__Robot__WheelsAssignment_7");
			builder.put(grammarAccess.getIPAccess().getNameAssignment_1(), "rule__IP__NameAssignment_1");
			builder.put(grammarAccess.getIPAccess().getIpAssignment_2(), "rule__IP__IpAssignment_2");
			builder.put(grammarAccess.getWheelAccess().getNameAssignment_1(), "rule__Wheel__NameAssignment_1");
			builder.put(grammarAccess.getWheelAccess().getRadiusAssignment_4(), "rule__Wheel__RadiusAssignment_4");
			builder.put(grammarAccess.getMoveCollectionAccess().getConcurrentAssignment_0(), "rule__MoveCollection__ConcurrentAssignment_0");
			builder.put(grammarAccess.getMoveCollectionAccess().getNameAssignment_2(), "rule__MoveCollection__NameAssignment_2");
			builder.put(grammarAccess.getMoveCollectionAccess().getRobotAssignment_4(), "rule__MoveCollection__RobotAssignment_4");
			builder.put(grammarAccess.getMoveCollectionAccess().getMovesAssignment_6(), "rule__MoveCollection__MovesAssignment_6");
			builder.put(grammarAccess.getAbstractMoveAccess().getTypeMAssignment(), "rule__AbstractMove__TypeMAssignment");
			builder.put(grammarAccess.getAbstractCrossMoveAccess().getTypeMAssignment(), "rule__AbstractCrossMove__TypeMAssignment");
			builder.put(grammarAccess.getMoveAccess().getNameAssignment_1(), "rule__Move__NameAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getDistanceAssignment_2(), "rule__Move__DistanceAssignment_2");
			builder.put(grammarAccess.getMoveAccess().getTypeAssignment_3(), "rule__Move__TypeAssignment_3");
			builder.put(grammarAccess.getMoveAccess().getVelocityAssignment_4_1(), "rule__Move__VelocityAssignment_4_1");
			builder.put(grammarAccess.getTurnAccess().getNameAssignment_1(), "rule__Turn__NameAssignment_1");
			builder.put(grammarAccess.getTurnAccess().getTypeAssignment_2(), "rule__Turn__TypeAssignment_2");
			builder.put(grammarAccess.getTurnAccess().getVelocityAssignment_3(), "rule__Turn__VelocityAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getTypeAssignment_3(), "rule__Sensor__TypeAssignment_3");
			builder.put(grammarAccess.getTypeSensorAccess().getTypeNameAssignment(), "rule__TypeSensor__TypeNameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PyDslRepGrammarAccess grammarAccess;

	@Override
	protected InternalPyDslRepParser createParser() {
		InternalPyDslRepParser result = new InternalPyDslRepParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PyDslRepGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PyDslRepGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
