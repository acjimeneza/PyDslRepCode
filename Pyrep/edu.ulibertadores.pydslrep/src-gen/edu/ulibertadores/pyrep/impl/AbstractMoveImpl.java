/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ulibertadores.PyDslRep.impl;

import edu.ulibertadores.PyDslRep.AbstractMove;
import edu.ulibertadores.PyDslRep.DataMove;
import edu.ulibertadores.PyDslRep.PyDslRepPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Move</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ulibertadores.PyDslRep.impl.AbstractMoveImpl#getTypeM <em>Type M</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractMoveImpl extends AbstractDataMoveImpl implements AbstractMove
{
  /**
   * The cached value of the '{@link #getTypeM() <em>Type M</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeM()
   * @generated
   * @ordered
   */
  protected DataMove typeM;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractMoveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PyDslRepPackage.Literals.ABSTRACT_MOVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataMove getTypeM()
  {
    return typeM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeM(DataMove newTypeM, NotificationChain msgs)
  {
    DataMove oldTypeM = typeM;
    typeM = newTypeM;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PyDslRepPackage.ABSTRACT_MOVE__TYPE_M, oldTypeM, newTypeM);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeM(DataMove newTypeM)
  {
    if (newTypeM != typeM)
    {
      NotificationChain msgs = null;
      if (typeM != null)
        msgs = ((InternalEObject)typeM).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PyDslRepPackage.ABSTRACT_MOVE__TYPE_M, null, msgs);
      if (newTypeM != null)
        msgs = ((InternalEObject)newTypeM).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PyDslRepPackage.ABSTRACT_MOVE__TYPE_M, null, msgs);
      msgs = basicSetTypeM(newTypeM, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PyDslRepPackage.ABSTRACT_MOVE__TYPE_M, newTypeM, newTypeM));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PyDslRepPackage.ABSTRACT_MOVE__TYPE_M:
        return basicSetTypeM(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PyDslRepPackage.ABSTRACT_MOVE__TYPE_M:
        return getTypeM();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PyDslRepPackage.ABSTRACT_MOVE__TYPE_M:
        setTypeM((DataMove)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PyDslRepPackage.ABSTRACT_MOVE__TYPE_M:
        setTypeM((DataMove)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PyDslRepPackage.ABSTRACT_MOVE__TYPE_M:
        return typeM != null;
    }
    return super.eIsSet(featureID);
  }

} //AbstractMoveImpl
