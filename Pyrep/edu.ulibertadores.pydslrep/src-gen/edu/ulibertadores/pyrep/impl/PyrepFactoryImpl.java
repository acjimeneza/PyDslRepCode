/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ulibertadores.PyDslRep.impl;

import edu.ulibertadores.PyDslRep.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PyDslRepFactoryImpl extends EFactoryImpl implements PyDslRepFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PyDslRepFactory init()
  {
    try
    {
      PyDslRepFactory thePyDslRepFactory = (PyDslRepFactory)EPackage.Registry.INSTANCE.getEFactory(PyDslRepPackage.eNS_URI);
      if (thePyDslRepFactory != null)
      {
        return thePyDslRepFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PyDslRepFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PyDslRepFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PyDslRepPackage.MODEL: return createModel();
      case PyDslRepPackage.ENTITY: return createEntity();
      case PyDslRepPackage.ENVIRONMENT: return createEnvironment();
      case PyDslRepPackage.ROBOT: return createRobot();
      case PyDslRepPackage.IP: return createIP();
      case PyDslRepPackage.WHEEL: return createWheel();
      case PyDslRepPackage.MOVE_COLLECTION: return createMoveCollection();
      case PyDslRepPackage.ABSTRACT_DATA_MOVE: return createAbstractDataMove();
      case PyDslRepPackage.ABSTRACT_MOVE: return createAbstractMove();
      case PyDslRepPackage.ABSTRACT_CROSS_MOVE: return createAbstractCrossMove();
      case PyDslRepPackage.DATA_MOVE: return createDataMove();
      case PyDslRepPackage.MOVE: return createMove();
      case PyDslRepPackage.TURN: return createTurn();
      case PyDslRepPackage.SENSOR: return createSensor();
      case PyDslRepPackage.TYPE_SENSOR: return createTypeSensor();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robot createRobot()
  {
    RobotImpl robot = new RobotImpl();
    return robot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IP createIP()
  {
    IPImpl ip = new IPImpl();
    return ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wheel createWheel()
  {
    WheelImpl wheel = new WheelImpl();
    return wheel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveCollection createMoveCollection()
  {
    MoveCollectionImpl moveCollection = new MoveCollectionImpl();
    return moveCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractDataMove createAbstractDataMove()
  {
    AbstractDataMoveImpl abstractDataMove = new AbstractDataMoveImpl();
    return abstractDataMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractMove createAbstractMove()
  {
    AbstractMoveImpl abstractMove = new AbstractMoveImpl();
    return abstractMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractCrossMove createAbstractCrossMove()
  {
    AbstractCrossMoveImpl abstractCrossMove = new AbstractCrossMoveImpl();
    return abstractCrossMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataMove createDataMove()
  {
    DataMoveImpl dataMove = new DataMoveImpl();
    return dataMove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Turn createTurn()
  {
    TurnImpl turn = new TurnImpl();
    return turn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensor createSensor()
  {
    SensorImpl sensor = new SensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeSensor createTypeSensor()
  {
    TypeSensorImpl typeSensor = new TypeSensorImpl();
    return typeSensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PyDslRepPackage getPyDslRepPackage()
  {
    return (PyDslRepPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PyDslRepPackage getPackage()
  {
    return PyDslRepPackage.eINSTANCE;
  }

} //PyDslRepFactoryImpl
