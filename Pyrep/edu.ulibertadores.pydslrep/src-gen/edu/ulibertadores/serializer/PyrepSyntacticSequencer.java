/*
 * generated by Xtext 2.18.0.M3
 */
package edu.ulibertadores.serializer;

import com.google.inject.Inject;
import edu.ulibertadores.services.PyDslRepGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class PyDslRepSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PyDslRepGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Environment___WithKeyword_8_0_LeftCurlyBracketKeyword_8_1_RightCurlyBracketKeyword_8_3_MovesKeyword_8_4__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PyDslRepGrammarAccess) access;
		match_Environment___WithKeyword_8_0_LeftCurlyBracketKeyword_8_1_RightCurlyBracketKeyword_8_3_MovesKeyword_8_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getWithKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_8_1()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_8_3()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getMovesKeyword_8_4()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getParallelRule())
			return getParallelToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Parallel:
	 * 	'parallel'
	 * ;
	 */
	protected String getParallelToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "parallel";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Environment___WithKeyword_8_0_LeftCurlyBracketKeyword_8_1_RightCurlyBracketKeyword_8_3_MovesKeyword_8_4__q.equals(syntax))
				emit_Environment___WithKeyword_8_0_LeftCurlyBracketKeyword_8_1_RightCurlyBracketKeyword_8_3_MovesKeyword_8_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('with' '{' '}' 'moves')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ip=[IP|ID] 'has' '{' '}' 'robots' (ambiguity) (rule end)
	 *     name=ID 'has' '{' '}' 'robots' (ambiguity) (rule end)
	 *     robots+=[Robot|ID] '}' 'robots' (ambiguity) (rule end)
	 */
	protected void emit_Environment___WithKeyword_8_0_LeftCurlyBracketKeyword_8_1_RightCurlyBracketKeyword_8_3_MovesKeyword_8_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
