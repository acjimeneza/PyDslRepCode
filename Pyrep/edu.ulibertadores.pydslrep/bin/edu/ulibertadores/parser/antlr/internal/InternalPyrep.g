/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalPyDslRep;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.ulibertadores.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ulibertadores.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ulibertadores.services.PyDslRepGrammarAccess;

}

@parser::members {

 	private PyDslRepGrammarAccess grammarAccess;

    public InternalPyDslRepParser(TokenStream input, PyDslRepGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PyDslRepGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getEnvironmentEntityParserRuleCall_0());
			}
			lv_environment_0_0=ruleEntity
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"environment",
					lv_environment_0_0,
					"edu.ulibertadores.PyDslRep.Entity");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntityAccess().getEnvironmentParserRuleCall_0());
		}
		this_Environment_0=ruleEnvironment
		{
			$current = $this_Environment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getRobotParserRuleCall_1());
		}
		this_Robot_1=ruleRobot
		{
			$current = $this_Robot_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getIPParserRuleCall_2());
		}
		this_IP_2=ruleIP
		{
			$current = $this_IP_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getSensorParserRuleCall_3());
		}
		this_Sensor_3=ruleSensor
		{
			$current = $this_Sensor_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getTypeSensorParserRuleCall_4());
		}
		this_TypeSensor_4=ruleTypeSensor
		{
			$current = $this_TypeSensor_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getWheelParserRuleCall_5());
		}
		this_Wheel_5=ruleWheel
		{
			$current = $this_Wheel_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getDataMoveParserRuleCall_6());
		}
		this_DataMove_6=ruleDataMove
		{
			$current = $this_DataMove_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getMoveCollectionParserRuleCall_7());
		}
		this_MoveCollection_7=ruleMoveCollection
		{
			$current = $this_MoveCollection_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	iv_ruleEnvironment=ruleEnvironment
	{ $current=$iv_ruleEnvironment.current; }
	EOF;

// Rule Environment
ruleEnvironment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='environment'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnvironmentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnvironmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with'
			{
				newLeafNode(otherlv_2, grammarAccess.getEnvironmentAccess().getWithKeyword_2_0());
			}
			otherlv_3='ip'
			{
				newLeafNode(otherlv_3, grammarAccess.getEnvironmentAccess().getIpKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnvironmentRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getEnvironmentAccess().getIpIPCrossReference_2_2_0());
					}
				)
			)
		)?
		otherlv_5='has'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnvironmentAccess().getHasKeyword_3());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnvironmentRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getEnvironmentAccess().getRobotsRobotCrossReference_5_0());
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_6());
		}
		otherlv_9='robots'
		{
			newLeafNode(otherlv_9, grammarAccess.getEnvironmentAccess().getRobotsKeyword_7());
		}
		(
			otherlv_10='with'
			{
				newLeafNode(otherlv_10, grammarAccess.getEnvironmentAccess().getWithKeyword_8_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnvironmentRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getEnvironmentAccess().getMovesMoveCollectionCrossReference_8_2_0());
					}
				)
			)*
			otherlv_13='}'
			{
				newLeafNode(otherlv_13, grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_8_3());
			}
			otherlv_14='moves'
			{
				newLeafNode(otherlv_14, grammarAccess.getEnvironmentAccess().getMovesKeyword_8_4());
			}
		)?
	)
;

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='robot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRobotAccess().getRobotKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getWithKeyword_2());
		}
		otherlv_3='port'
		{
			newLeafNode(otherlv_3, grammarAccess.getRobotAccess().getPortKeyword_3());
		}
		(
			(
				lv_port_4_0=RULE_INT
				{
					newLeafNode(lv_port_4_0, grammarAccess.getRobotAccess().getPortINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='has'
		{
			newLeafNode(otherlv_5, grammarAccess.getRobotAccess().getHasKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getRobotAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getRobotAccess().getWheelsWheelCrossReference_7_0());
				}
			)
		)+
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getRobotAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_9='wheels'
		{
			newLeafNode(otherlv_9, grammarAccess.getRobotAccess().getWheelsKeyword_9());
		}
	)
;

// Entry rule entryRuleIP
entryRuleIP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIPRule()); }
	iv_ruleIP=ruleIP
	{ $current=$iv_ruleIP.current; }
	EOF;

// Rule IP
ruleIP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ip'
		{
			newLeafNode(otherlv_0, grammarAccess.getIPAccess().getIpKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIPAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIPRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIPAccess().getIpIPAParserRuleCall_2_0());
				}
				lv_ip_2_0=ruleIPA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIPRule());
					}
					set(
						$current,
						"ip",
						lv_ip_2_0,
						"edu.ulibertadores.PyDslRep.IPA");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIPA
entryRuleIPA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIPARule()); }
	iv_ruleIPA=ruleIPA
	{ $current=$iv_ruleIPA.current.getText(); }
	EOF;

// Rule IPA
ruleIPA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIPAAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPAAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getIPAAccess().getINTTerminalRuleCall_2());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPAAccess().getFullStopKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getIPAAccess().getINTTerminalRuleCall_4());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPAAccess().getFullStopKeyword_5());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getIPAAccess().getINTTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleWheel
entryRuleWheel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWheelRule()); }
	iv_ruleWheel=ruleWheel
	{ $current=$iv_ruleWheel.current; }
	EOF;

// Rule Wheel
ruleWheel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='wheel'
		{
			newLeafNode(otherlv_0, grammarAccess.getWheelAccess().getWheelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWheelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWheelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getWheelAccess().getWithKeyword_2());
		}
		otherlv_3='radius'
		{
			newLeafNode(otherlv_3, grammarAccess.getWheelAccess().getRadiusKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWheelAccess().getRadiusFLOATParserRuleCall_4_0());
				}
				lv_radius_4_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWheelRule());
					}
					set(
						$current,
						"radius",
						lv_radius_4_0,
						"edu.ulibertadores.PyDslRep.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMoveCollection
entryRuleMoveCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveCollectionRule()); }
	iv_ruleMoveCollection=ruleMoveCollection
	{ $current=$iv_ruleMoveCollection.current; }
	EOF;

// Rule MoveCollection
ruleMoveCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveCollectionAccess().getConcurrentParallelParserRuleCall_0_0());
				}
				lv_concurrent_0_0=ruleParallel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveCollectionRule());
					}
					set(
						$current,
						"concurrent",
						true,
						"edu.ulibertadores.PyDslRep.Parallel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='movement'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveCollectionAccess().getMovementKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMoveCollectionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveCollectionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getMoveCollectionAccess().getOfKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveCollectionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getMoveCollectionAccess().getRobotRobotCrossReference_4_0());
				}
			)
		)
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getMoveCollectionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveCollectionAccess().getMovesAbstractDataMoveParserRuleCall_6_0());
				}
				lv_moves_6_0=ruleAbstractDataMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveCollectionRule());
					}
					add(
						$current,
						"moves",
						lv_moves_6_0,
						"edu.ulibertadores.PyDslRep.AbstractDataMove");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getMoveCollectionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleAbstractDataMove
entryRuleAbstractDataMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractDataMoveRule()); }
	iv_ruleAbstractDataMove=ruleAbstractDataMove
	{ $current=$iv_ruleAbstractDataMove.current; }
	EOF;

// Rule AbstractDataMove
ruleAbstractDataMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractDataMoveAccess().getAbstractCrossMoveParserRuleCall_0());
		}
		this_AbstractCrossMove_0=ruleAbstractCrossMove
		{
			$current = $this_AbstractCrossMove_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractDataMoveAccess().getAbstractMoveParserRuleCall_1());
		}
		this_AbstractMove_1=ruleAbstractMove
		{
			$current = $this_AbstractMove_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAbstractMove
entryRuleAbstractMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractMoveRule()); }
	iv_ruleAbstractMove=ruleAbstractMove
	{ $current=$iv_ruleAbstractMove.current; }
	EOF;

// Rule AbstractMove
ruleAbstractMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAbstractMoveAccess().getTypeMDataMoveParserRuleCall_0());
			}
			lv_typeM_0_0=ruleDataMove
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAbstractMoveRule());
				}
				set(
					$current,
					"typeM",
					lv_typeM_0_0,
					"edu.ulibertadores.PyDslRep.DataMove");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAbstractCrossMove
entryRuleAbstractCrossMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractCrossMoveRule()); }
	iv_ruleAbstractCrossMove=ruleAbstractCrossMove
	{ $current=$iv_ruleAbstractCrossMove.current; }
	EOF;

// Rule AbstractCrossMove
ruleAbstractCrossMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAbstractCrossMoveRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getAbstractCrossMoveAccess().getTypeMDataMoveCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleDataMove
entryRuleDataMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataMoveRule()); }
	iv_ruleDataMove=ruleDataMove
	{ $current=$iv_ruleDataMove.current; }
	EOF;

// Rule DataMove
ruleDataMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataMoveAccess().getTurnParserRuleCall_0());
		}
		this_Turn_0=ruleTurn
		{
			$current = $this_Turn_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataMoveAccess().getMoveParserRuleCall_1());
		}
		this_Move_1=ruleMove
		{
			$current = $this_Move_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMoveAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						true,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getDistanceFLOATParserRuleCall_2_0());
				}
				lv_distance_2_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"edu.ulibertadores.PyDslRep.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getTypeDistanceParserRuleCall_3_0());
				}
				lv_type_3_0=ruleDistance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"edu.ulibertadores.PyDslRep.Distance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='at'
			{
				newLeafNode(otherlv_4, grammarAccess.getMoveAccess().getAtKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoveAccess().getVelocityFLOATParserRuleCall_4_1_0());
					}
					lv_velocity_5_0=ruleFLOAT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoveRule());
						}
						set(
							$current,
							"velocity",
							lv_velocity_5_0,
							"edu.ulibertadores.PyDslRep.FLOAT");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParallel
entryRuleParallel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	iv_ruleParallel=ruleParallel
	{ $current=$iv_ruleParallel.current.getText(); }
	EOF;

// Rule Parallel
ruleParallel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='parallel'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getParallelAccess().getParallelKeyword());
	}
;

// Entry rule entryRuleDistance
entryRuleDistance returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDistanceRule()); }
	iv_ruleDistance=ruleDistance
	{ $current=$iv_ruleDistance.current.getText(); }
	EOF;

// Rule Distance
ruleDistance returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='meters'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDistanceAccess().getMetersKeyword_0());
		}
		    |
		kw='centimeters'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDistanceAccess().getCentimetersKeyword_1());
		}
	)
;

// Entry rule entryRuleTurn
entryRuleTurn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRule()); }
	iv_ruleTurn=ruleTurn
	{ $current=$iv_ruleTurn.current; }
	EOF;

// Rule Turn
ruleTurn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='turn'
		{
			newLeafNode(otherlv_0, grammarAccess.getTurnAccess().getTurnKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTurnAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTurnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						true,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnAccess().getTypeOrientationParserRuleCall_2_0());
				}
				lv_type_2_0=ruleOrientation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"edu.ulibertadores.PyDslRep.Orientation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnAccess().getVelocityFLOATParserRuleCall_3_0());
				}
				lv_velocity_3_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnRule());
					}
					set(
						$current,
						"velocity",
						lv_velocity_3_0,
						"edu.ulibertadores.PyDslRep.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleOrientation
entryRuleOrientation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrientationRule()); }
	iv_ruleOrientation=ruleOrientation
	{ $current=$iv_ruleOrientation.current.getText(); }
	EOF;

// Rule Orientation
ruleOrientation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='left'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrientationAccess().getLeftKeyword_0());
		}
		    |
		kw='right'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrientationAccess().getRightKeyword_1());
		}
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFLOATAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getTypeTypeSensorParserRuleCall_3_0());
				}
				lv_type_3_0=ruleTypeSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"edu.ulibertadores.PyDslRep.TypeSensor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeSensor
entryRuleTypeSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSensorRule()); }
	iv_ruleTypeSensor=ruleTypeSensor
	{ $current=$iv_ruleTypeSensor.current; }
	EOF;

// Rule TypeSensor
ruleTypeSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1='bumper'
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getTypeSensorAccess().getTypeNameBumperKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeSensorRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2='distance'
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getTypeSensorAccess().getTypeNameDistanceKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeSensorRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
